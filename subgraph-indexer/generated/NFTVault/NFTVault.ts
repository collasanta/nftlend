// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class DefaultCollateral extends ethereum.Event {
  get params(): DefaultCollateral__Params {
    return new DefaultCollateral__Params(this);
  }
}

export class DefaultCollateral__Params {
  _event: DefaultCollateral;

  constructor(event: DefaultCollateral) {
    this._event = event;
  }

  get loanId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get initialOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class LoanLended extends ethereum.Event {
  get params(): LoanLended__Params {
    return new LoanLended__Params(this);
  }
}

export class LoanLended__Params {
  _event: LoanLended;

  constructor(event: LoanLended) {
    this._event = event;
  }

  get loanId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get lender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get startDate(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LoanRepaid extends ethereum.Event {
  get params(): LoanRepaid__Params {
    return new LoanRepaid__Params(this);
  }
}

export class LoanRepaid__Params {
  _event: LoanRepaid;

  constructor(event: LoanRepaid) {
    this._event = event;
  }

  get loanId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get lender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get repaymentAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get proportionalInteresPaid(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get timePassed(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get refundExcessAmount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class LoanTermsSet extends ethereum.Event {
  get params(): LoanTermsSet__Params {
    return new LoanTermsSet__Params(this);
  }
}

export class LoanTermsSet__Params {
  _event: LoanTermsSet;

  constructor(event: LoanTermsSet) {
    this._event = event;
  }

  get loanId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get initialOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get nftContractAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get principal(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get duration(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get interest(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class NFTVault__loansResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: Address;
  value7: BigInt;
  value8: i32;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: Address,
    value7: BigInt,
    value8: i32,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromAddress(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set(
      "value8",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value8)),
    );
    return map;
  }

  getInitialOwner(): Address {
    return this.value0;
  }

  getNftContractAddress(): Address {
    return this.value1;
  }

  getTokenId(): BigInt {
    return this.value2;
  }

  getPrincipal(): BigInt {
    return this.value3;
  }

  getDuration(): BigInt {
    return this.value4;
  }

  getInterest(): BigInt {
    return this.value5;
  }

  getLender(): Address {
    return this.value6;
  }

  getStartDate(): BigInt {
    return this.value7;
  }

  getStatus(): i32 {
    return this.value8;
  }
}

export class NFTVault extends ethereum.SmartContract {
  static bind(address: Address): NFTVault {
    return new NFTVault("NFTVault", address);
  }

  feePercentage(): BigInt {
    let result = super.call("feePercentage", "feePercentage():(uint256)", []);

    return result[0].toBigInt();
  }

  try_feePercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "feePercentage",
      "feePercentage():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  loanId(): BigInt {
    let result = super.call("loanId", "loanId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_loanId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("loanId", "loanId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  loans(param0: BigInt): NFTVault__loansResult {
    let result = super.call(
      "loans",
      "loans(uint256):(address,address,uint256,uint256,uint256,uint256,address,uint256,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new NFTVault__loansResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toAddress(),
      result[7].toBigInt(),
      result[8].toI32(),
    );
  }

  try_loans(param0: BigInt): ethereum.CallResult<NFTVault__loansResult> {
    let result = super.tryCall(
      "loans",
      "loans(uint256):(address,address,uint256,uint256,uint256,uint256,address,uint256,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NFTVault__loansResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toAddress(),
        value[7].toBigInt(),
        value[8].toI32(),
      ),
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalFeesCollected(): BigInt {
    let result = super.call(
      "totalFeesCollected",
      "totalFeesCollected():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_totalFeesCollected(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalFeesCollected",
      "totalFeesCollected():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes,
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3),
      ],
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class SetLoanTermsCall extends ethereum.Call {
  get inputs(): SetLoanTermsCall__Inputs {
    return new SetLoanTermsCall__Inputs(this);
  }

  get outputs(): SetLoanTermsCall__Outputs {
    return new SetLoanTermsCall__Outputs(this);
  }
}

export class SetLoanTermsCall__Inputs {
  _call: SetLoanTermsCall;

  constructor(call: SetLoanTermsCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get principal(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get duration(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get interest(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SetLoanTermsCall__Outputs {
  _call: SetLoanTermsCall;

  constructor(call: SetLoanTermsCall) {
    this._call = call;
  }
}

export class LendCall extends ethereum.Call {
  get inputs(): LendCall__Inputs {
    return new LendCall__Inputs(this);
  }

  get outputs(): LendCall__Outputs {
    return new LendCall__Outputs(this);
  }
}

export class LendCall__Inputs {
  _call: LendCall;

  constructor(call: LendCall) {
    this._call = call;
  }

  get _loanId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LendCall__Outputs {
  _call: LendCall;

  constructor(call: LendCall) {
    this._call = call;
  }
}

export class DefaultCollateralCall extends ethereum.Call {
  get inputs(): DefaultCollateralCall__Inputs {
    return new DefaultCollateralCall__Inputs(this);
  }

  get outputs(): DefaultCollateralCall__Outputs {
    return new DefaultCollateralCall__Outputs(this);
  }
}

export class DefaultCollateralCall__Inputs {
  _call: DefaultCollateralCall;

  constructor(call: DefaultCollateralCall) {
    this._call = call;
  }

  get _loanId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DefaultCollateralCall__Outputs {
  _call: DefaultCollateralCall;

  constructor(call: DefaultCollateralCall) {
    this._call = call;
  }
}

export class RepayCall extends ethereum.Call {
  get inputs(): RepayCall__Inputs {
    return new RepayCall__Inputs(this);
  }

  get outputs(): RepayCall__Outputs {
    return new RepayCall__Outputs(this);
  }
}

export class RepayCall__Inputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }

  get _loanId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RepayCall__Outputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }
}

export class WithdrawFeesCall extends ethereum.Call {
  get inputs(): WithdrawFeesCall__Inputs {
    return new WithdrawFeesCall__Inputs(this);
  }

  get outputs(): WithdrawFeesCall__Outputs {
    return new WithdrawFeesCall__Outputs(this);
  }
}

export class WithdrawFeesCall__Inputs {
  _call: WithdrawFeesCall;

  constructor(call: WithdrawFeesCall) {
    this._call = call;
  }
}

export class WithdrawFeesCall__Outputs {
  _call: WithdrawFeesCall;

  constructor(call: WithdrawFeesCall) {
    this._call = call;
  }
}
